name: test-github-actions-releases

on:
  push:
  workflow_dispatch:

jobs:
  test-github-actions-releases:
    runs-on: ubuntu-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout github-actions-repo
        uses: actions/checkout@v4
        with:
          repository: actions/runner-images
          path: runner-images

      - name: Git tags
        run: |
          cd runner-images
          git fetch --tags
          git fetch --prune --unshallow || true
          
      - name: Get latest release ubuntu
        id: get_release_ubuntu
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/actions/runner-images/releases)
          RELEASE_UBUNTU=$(echo "$RELEASES" | jq -r '.[] | select(.prerelease == false) | .tag_name' | sort -r | grep ubuntu22 |head -n1)
          echo "$RELEASE_UBUNTU"
          echo "$RELEASE_UBUNTU" > runner-images/ubuntu.txt

      - name: Get latest release macOS-12
        id: get_release_macos12
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/actions/runner-images/releases)
          RELEASE_MACOS12=$(echo "$RELEASES" | jq -r '.[] | select(.prerelease == false) | .tag_name' | sort -r | grep macos-12 |head -n1)
          echo "$RELEASE_MACOS12"
          echo "$RELEASE_MACOS12" > runner-images/macos-12.txt
      
      - name: Get latest release macos-13
        id: get_release_macos13
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/actions/runner-images/releases)
          RELEASE_MACOS13=$(echo "$RELEASES" | jq -r '.[] | select(.prerelease == false) | .tag_name' | sort -r | grep macos-13 |head -n1)
          echo "$RELEASE_MACOS13"
          echo "$RELEASE_MACOS13" > runner-images/macos-13.txt

      - name: Get latest release macos-14
        id: get_release_macos14
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/actions/runner-images/releases)
          RELEASE_MACOS14=$(echo "$RELEASES" | jq -r '.[] | select(.prerelease == false) | .tag_name' | sort -r | grep macos-14 |head -n1)
          echo "$RELEASE_MACOS14"
          echo "$RELEASE_MACOS14" > runner-images/macos-14.txt

      - name: Get latest release windows 2022
        id: get_release_windows
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/actions/runner-images/releases)
          RELEASE_WINDOWS=$(echo "$RELEASES" | jq -r '.[] | select(.prerelease == false) | .tag_name' | sort -r | grep win22 |head -n1)
          echo "$RELEASE_WINDOWS"
          echo "$RELEASE_WINDOWS" > runner-images/windows.txt

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Read in txt files
        run: |
          ubuntu <- readLines("runner-images/ubuntu.txt")
          macos12 <- readLines("runner-images/macos-12.txt")
          macos13 <- readLines("runner-images/macos-13.txt")
          macos14 <- readLines("runner-images/macos-14.txt")
          windows <- readLines("runner-images/windows.txt")

          all_os <- capture.output(cat(ubuntu, macos12, macos13, macos14, windows, sep = "\n"))
          file.create("runner-images/all_os_versions_new.txt")
          writeLines(all_os, "runner-images/all_os_versions_new.txt")

          all_os_previous <- readLines(".github/ref_file/all_os_versions.txt")
          all_os_new <- readLines("runner-images/all_os_versions_new.txt")
          all_os_new == all_os_previous
          
        shell: Rscript {0}

      - name: Artifact
        uses: actions/upload-artifact@main
        with:
          name: 'all_os_versions.txt'
          path: 'all_os_versions.txt'
